let fillArray = fn(arr, size) {
    if (size == 0) {
        return arr;
    } else {
        return fillArray(push(arr, random()), size - 1);
    }
};

let sigmoid = fn(x) {
    return 1.0 / (1.0 + exp(-x));
};

let map = fn(arr, func) {
    let iter = fn(arr, accumulated, func) {
        if (len(arr) == 0) {
            return accumulated;
        } else {
            let head = first(arr);
            let tail = rest(arr);
            return iter(tail, push(accumulated, func(head)), func);
        }
    };
    return iter(arr, [], func);
};

let weights_input_hidden = tensor([2, 2], fillArray([],4)); 
let weights_hidden_output = tensor([2, 1], fillArray([],2));

let bias_hidden = tensor([2], fillArray([],2));
let bias_output = tensor([1], fillArray([],1));

let forward_pass = fn(input) {
    let hidden_input = (input * weights_input_hidden) + bias_hidden;
    let hidden_output = map(hidden_input, sigmoid);
    
    let output_input = (hidden_output * weights_hidden_output) + bias_output;
    let output = map(output_input, sigmoid);
    
    return output;
};

let test = fn(x) {
    return x;
};